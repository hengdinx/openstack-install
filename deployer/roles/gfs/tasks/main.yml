---
# gluster config

- name: install glusterfs with yum
  yum: name={{ item }} state=latest
  with_items:
    - glusterfs
    - glusterfs-server
    - glusterfs-coreutils

- name: start necessary services
  service: name={{ item }} state=started enabled=yes
  with_items:
    - glusterd

- name: create /mnt/gfs
  file: path=/mnt/gfs state=directory owner=apache group=apache

- name: create /var/lib/zero/OTC
  file: path={{ item }} state=directory owner=apache group=apache
  with_items:
    - /var/lib/zero/OTC
    - /var/lib/zero/OTC/ISO
    - /var/lib/zero/ISO
    - /var/lib/zero/ISO/ISO

- block:

  #- name: probe first node to the pool
  #  shell: "gluster peer probe {{ item }}"
  #  with_items:
  #    - "{{ controller_hostname_list }}"

  #- name: sleep 10s for probe
  #  shell: sleep 10

  #- name: create glusterFS volumes for HA install
  #  shell: "gluster volume create e3cgfs replica 3 {% for i in controller_hostname_list %}{{ i }}:/mnt/gfs {% endfor %} force"
  #  register: result
  #  failed_when: 'result.rc != 0 and "already exists" not in result.stderr'
  #  when: ha_enabled

  #- name: create glusterFS volumes for ALLINONE install
  #  shell: "gluster volume create e3cgfs           {% for i in controller_hostname_list %}{{ i }}:/var/lib/zero/ISO {% endfor %} force"
  #  register: result
  #  failed_when: 'result.rc != 0 and "already exists" not in result.stderr'
  #  when: ha_enabled == False

  #- name: sleep 10s for volume create
  #  shell: sleep 10

  #- name: start gluster volume
  #  shell: gluster volume start e3cgfs
  #  register: result
  #  failed_when: 'result.rc != 0 and "already started" not in result.stderr'

  #- name: wait until volume available
  #  shell: gluster volume status
  #  register: result
  #  until: '"e3cgfs" in result.stdout'
  #  retries: 10
  #  delay: 10

  - name: probe peer
    gluster_peer: state=present nodes={{ controller_hostname_list }}

  - name: sleep 10s for probe
    shell: sleep 10

  - name: create glusterFS volumes
    gluster_volume:
      name: e3cgfs
      replicas: 3
      state: present
      bricks: /mnt/gfs
      cluster: "{{ controller_hostname_list }}"
      force: yes
    when: ha_enabled

  - name: create glusterFS volumes
    gluster_volume:
      name: e3cgfs
      state: present
      bricks: /var/lib/zero/ISO
      cluster: "{{ controller_hostname_list }}"
      force: yes
    when: ha_enabled == False

  - name: sleep 5s for volume create
    shell: sleep 5

  - name: start gluster volume
    gluster_volume:
      state: started
      name: e3cgfs

  - name: sleep 5s for volume start
    shell: sleep 5

  run_once: true
  delegate_to: "{{ master_node }}"
  when: 'action_type == "install"'

- name: copy configure file for gfs
  copy: src=e3c-gfsmount dest=/usr/bin/e3c-gfsmount group=root owner=root mode=755

- name: copy gfsmount service file
  copy:
    src: e3c-gfsmount.service
    dest: /usr/lib/systemd/system/e3c-gfsmount.service

- name: restart e3c-gfsmount.service
  systemd:
    name: e3c-gfsmount
    daemon_reload: yes
    state: started
    enabled: yes
