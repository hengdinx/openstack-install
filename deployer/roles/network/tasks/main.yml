# network config

- name: cleanup network config backup dir
  file: path=/opt/backup/ state=absent

- name: recreate /opt/backup/
  file: path=/opt/backup/ state=directory

- name: backup network config and rm all ifcfg files
  shell: "cp /etc/sysconfig/network-scripts/ifcfg-* /opt/backup/;rm -f /etc/sysconfig/network-scripts/ifcfg-*"

- name: copy bond nic config to /etc/sysconfig/network-scripts/
  shell: "ls /sys/class/net/{{ item }}/|grep slave|awk -F'_' '{print $2}'|xargs -I {} cp /opt/backup/ifcfg-{} /etc/sysconfig/network-scripts/"
  with_items:
    - "{{ ext_card }}"
    - "{{ mg_card }}"
    - "{{ cluster_card }}"
    - "{{ sto_card }}"
  when: 'item != None and item != "" and "bond" in item'

- name: copy ifcfg-lo to remote
  copy: src=ifcfg-lo dest=/etc/sysconfig/network-scripts/ifcfg-lo

- name: render config files for ex bridges
  template: src=br-template.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.port }}
  with_items:
    - { port: br-ex, mask: "{{ ext_netmask }}", ip: "{{ ext_ip }}" }
  when: 'item.ip != "" and item.ip != None and "neutron" in my_role'

- name: render config files for br-eth1 bridges
  template: src=br-template.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.port }}
  with_items:
    - { port: br-eth1, mask: "{{ mg_netmask }}", ip: "{{ mg_ip }}" }
  when: 'item.ip != "" and item.ip != None and (["neutron", "compute"]|intersect(my_role) != [])'

- name: render config files for ext NICs
  template: src=nic-template.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.port }}
  with_items:
    - { port: "{{ ext_card }}", ip: "{{ ext_ip }}", mask: "{{ ext_netmask }}", br_name: "br-ex"}
  when: 'item.ip != "" and item.ip != None  and "neutron" in my_role'

- name: render config files for NICs
  template: src=nic-template.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.port }}
  with_items:
    - { port: "{{ sto_internal_card }}", ip: "{{ sto_internal_ip }}", mask: "{{ sto_internal_netmask }}" }
    - { port: "{{ mg_card }}", ip: "{{ mg_ip }}", mask: "{{ mg_netmask }}", br_name: "br-eth1"}
  when: 'item.ip != "" and item.ip != None'

- name: render cluster net nic config
  template: src=nic-template.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.port }}
  with_items:
    - { port: "{{ cluster_card }}", ip: "{{ cluster_ip }}", mask: "{{ cluster_netmask }}" }
    - { port: "{{ sto_card }}", ip: "{{ sto_ip }}", mask: "{{ sto_netmask }}" }
  when: 'item.port != mg_card and item.port != "" and item.port != None'

- name: set BONDING_OPTS in nic config
  shell: '[ "`cat /opt/backup/ifcfg-{{ item }}|grep BONDING_OPTS`" = "`cat /etc/sysconfig/network-scripts/ifcfg-{{ item }} |grep BONDING_OPTS`" ] || cat /opt/backup/ifcfg-{{ item }}|grep BONDING_OPTS >> /etc/sysconfig/network-scripts/ifcfg-{{ item }}'
  with_items:
    - "{{ ext_card }}"
    - "{{ mg_card }}"
    - "{{ cluster_card }}"
    - "{{ sto_card }}"
  when: 'item != None and item != "" and "bond" in item'

- name: restart network
  service: name=network state=restarted enabled=yes
